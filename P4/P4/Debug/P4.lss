
P4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008db  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044f  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d1  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fb  00000000  00000000  00001c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_3>
  10:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  9e:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:

#include "keys.h"

void init() {
	// PORTD as output. *10 bit + 7 value bits
	DDRD |= 0b11111111;
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	
	// input for switches with pull up resistor
	DDRB |= (0 << DDB0) | (0 << DDB1);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DDB0) | (1 << DDB1);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	85 b9       	out	0x05, r24	; 5
	
	// allow interrupts for the two switches
	PCICR |= (1 << PCIE0) | (1 << PCIE1);
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);
  c0:	eb e6       	ldi	r30, 0x6B	; 107
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	
	sei();
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <__vector_3>:

volatile uint8_t number1 = 0x00;
volatile uint8_t number2 = 0x00;

//increment button
ISR(PCINT0_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	number1++;
  de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
	if(number1 == 10) {
  e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	b1 f4       	brne	.+44     	; 0x11c <__vector_3+0x4e>
		number1 = number1 % 10;
  f0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <number1>
  f4:	8d ec       	ldi	r24, 0xCD	; 205
  f6:	28 9f       	mul	r18, r24
  f8:	81 2d       	mov	r24, r1
  fa:	11 24       	eor	r1, r1
  fc:	86 95       	lsr	r24
  fe:	86 95       	lsr	r24
 100:	86 95       	lsr	r24
 102:	88 0f       	add	r24, r24
 104:	98 2f       	mov	r25, r24
 106:	99 0f       	add	r25, r25
 108:	99 0f       	add	r25, r25
 10a:	89 0f       	add	r24, r25
 10c:	28 1b       	sub	r18, r24
 10e:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <number1>
		number2++;
 112:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	}
	if(number2 == 10) {
 11c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 120:	8a 30       	cpi	r24, 0x0A	; 10
 122:	21 f4       	brne	.+8      	; 0x12c <__vector_3+0x5e>
		number1 = 0;
 124:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <number1>
		number2 = 0;
 128:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_4>:

//decrement button
ISR(PCINT1_vect) {
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	if(number1 == 0) {
 148:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
 14c:	81 11       	cpse	r24, r1
 14e:	13 c0       	rjmp	.+38     	; 0x176 <__vector_4+0x3a>
		if(number2 == 0) {
 150:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 154:	81 11       	cpse	r24, r1
 156:	06 c0       	rjmp	.+12     	; 0x164 <__vector_4+0x28>
			number1 = 9;
 158:	89 e0       	ldi	r24, 0x09	; 9
 15a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
			number2 = 9;
 15e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 162:	0e c0       	rjmp	.+28     	; 0x180 <__vector_4+0x44>
		}
		else {
			number2--;
 164:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			number1 = 9;
 16e:	89 e0       	ldi	r24, 0x09	; 9
 170:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
 174:	05 c0       	rjmp	.+10     	; 0x180 <__vector_4+0x44>
		}
	}
	else {
		number1--;
 176:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
	}
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <main>:

int main(void)
{
	init();
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	while(1)
		display(number1, number2);
 190:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 194:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
 198:	0e 94 cf 00 	call	0x19e	; 0x19e <display>
 19c:	f9 cf       	rjmp	.-14     	; 0x190 <main+0x4>

0000019e <display>:
	0b00010000
};

void display(const uint8_t number1, const uint8_t number2) {
	// lower number
	PORTD = numbers[number1];
 19e:	e8 2f       	mov	r30, r24
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e0 50       	subi	r30, 0x00	; 0
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	8b b9       	out	0x0b, r24	; 11
	// higher number
	PORTD = numbers[number2] | (1 << 7);
 1aa:	e6 2f       	mov	r30, r22
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	e0 50       	subi	r30, 0x00	; 0
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 81       	ld	r24, Z
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f e5       	ldi	r24, 0x5F	; 95
 1ba:	9a ee       	ldi	r25, 0xEA	; 234
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <display+0x1e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <display+0x24>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
