
P4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000190  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000920  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c4  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000436  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:

#include "keys.h"

void init() {
	// PORTD as output. *10 bit + 7 value bits
	DDRD |= 0b11111111;
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	
	// input for switches with pull up resistor
	DDRB |= (0 << DDB0) | (0 << DDB1);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DDB0) | (1 << DDB1);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	85 b9       	out	0x05, r24	; 5
	
	// allow interrupts for the two switches
	PCICR |= (1 << PCIE0);
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);
  c0:	eb e6       	ldi	r30, 0x6B	; 107
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	
	sei();
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <__vector_3>:
volatile uint8_t number1 = 0;
volatile uint8_t number2 = 0;
volatile uint8_t previous_state_b0 = 1;
volatile uint8_t previous_state_b1 = 1;

ISR(PCINT0_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	uint8_t current_state_b0 = PINB0;
	uint8_t falling_edge_b0 = ~current_state_b0 & previous_state_b0;
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <previous_state_b0>
	previous_state_b0 = current_state_b0;
  e6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <previous_state_b0>
	
	
	//increment button
	if(falling_edge_b0 & !(PORTB & (1 << DDB0))) {
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	28 27       	eor	r18, r24
  f0:	42 2f       	mov	r20, r18
  f2:	41 70       	andi	r20, 0x01	; 1
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	89 2f       	mov	r24, r25
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	84 23       	and	r24, r20
  fc:	95 23       	and	r25, r21
  fe:	89 2b       	or	r24, r25
 100:	c1 f0       	breq	.+48     	; 0x132 <__vector_3+0x64>
		number1++;
 102:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <number1>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <number1>
		if(number1 == 10) {
 10c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <number1>
 110:	8a 30       	cpi	r24, 0x0A	; 10
 112:	39 f4       	brne	.+14     	; 0x122 <__vector_3+0x54>
			number1 = 0;
 114:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <number1>
			number2++;
 118:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		}
		if(number2 == 10) {
 122:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 126:	8a 30       	cpi	r24, 0x0A	; 10
 128:	21 f4       	brne	.+8      	; 0x132 <__vector_3+0x64>
			number1 = 0;
 12a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <number1>
			number2 = 0;
 12e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
	
	uint8_t current_state_b1 = PINB1;
	uint8_t falling_edge_b1 = ~current_state_b1 & previous_state_b1;
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	previous_state_b1 = current_state_b1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	//decrement
	if(falling_edge_b1 & !(PORTB & (1 << DDB1))) {
 13c:	85 b1       	in	r24, 0x05	; 5
		}
		else {
			number1--;
		}
	}
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:

int main(void)
{
	init();
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	while(1) {
		display(number1, number2);
 156:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 15a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <number1>
 15e:	0e 94 b2 00 	call	0x164	; 0x164 <display>
 162:	f9 cf       	rjmp	.-14     	; 0x156 <main+0x4>

00000164 <display>:
	0b00010000
};

void display(uint8_t number1, uint8_t number2) {
	// lower number
	PORTD = numbers[number1] | (1 << 7);
 164:	e8 2f       	mov	r30, r24
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ee 5f       	subi	r30, 0xFE	; 254
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	80 81       	ld	r24, Z
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f e1       	ldi	r24, 0x1F	; 31
 174:	9e e4       	ldi	r25, 0x4E	; 78
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <display+0x12>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <display+0x18>
 17c:	00 00       	nop
	_delay_ms(5);
	// higher number
	PORTD = numbers[number2];
 17e:	e6 2f       	mov	r30, r22
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ee 5f       	subi	r30, 0xFE	; 254
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 81       	ld	r24, Z
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
