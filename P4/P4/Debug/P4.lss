
P4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000019c  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094b  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000808  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bb  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a5  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:

#include "keys.h"

void init() {
	//PORTD as output
	DDRD = 0b11111111;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	
	//input for switches with pull up resistor
	DDRB = (0 << DDB0) | (0 << DDB1);
  aa:	14 b8       	out	0x04, r1	; 4
	PORTB |= (1 << PINB0) | (1 << PINB1);
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	85 b9       	out	0x05, r24	; 5
	
	//cli();
	//allow interrupts for the two switches
	PCICR |= (1 << PCIE0);
  b2:	e8 e6       	ldi	r30, 0x68	; 104
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);
  bc:	eb e6       	ldi	r30, 0x6B	; 107
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	80 83       	st	Z, r24
	
	sei();
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <__vector_3>:


volatile uint8_t number1 = 0;
volatile uint8_t number2 = 0;

ISR(PCINT0_vect) {
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	if(!(PINB & (1 << PB0))) {
  d6:	18 99       	sbic	0x03, 0	; 3
  d8:	18 c0       	rjmp	.+48     	; 0x10a <__vector_3+0x40>
		number1++;
  da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
		if(number1 == 10) {
  e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	39 f4       	brne	.+14     	; 0xfa <__vector_3+0x30>
			number1 = 0;
  ec:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <number1>
			number2++;
  f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		}
		if(number2 == 10) {
  fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  fe:	8a 30       	cpi	r24, 0x0A	; 10
 100:	21 f4       	brne	.+8      	; 0x10a <__vector_3+0x40>
			number1 = 0;
 102:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <number1>
			number2 = 0;
 106:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		}
	}
	if(!(PINB & (1 << PB1))) {
 10a:	19 99       	sbic	0x03, 1	; 3
 10c:	1c c0       	rjmp	.+56     	; 0x146 <__vector_3+0x7c>
		if(number1 == 0) {
 10e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
 112:	81 11       	cpse	r24, r1
 114:	13 c0       	rjmp	.+38     	; 0x13c <__vector_3+0x72>
			if(number2 == 0) {
 116:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 11a:	81 11       	cpse	r24, r1
 11c:	06 c0       	rjmp	.+12     	; 0x12a <__vector_3+0x60>
				number1 = 9;
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
				number2 = 9;
 124:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 128:	0e c0       	rjmp	.+28     	; 0x146 <__vector_3+0x7c>
			}
			else {
				number2--;
 12a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
				number1 = 9;
 134:	89 e0       	ldi	r24, 0x09	; 9
 136:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
 13a:	05 c0       	rjmp	.+10     	; 0x146 <__vector_3+0x7c>
			}
		}
		else {
			number1--;
 13c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
 140:	81 50       	subi	r24, 0x01	; 1
 142:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <number1>
		}
	}
}
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:

int main(void)
{
	init();
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	while(1) {
		display(number1, number2);
 156:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 15a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <number1>
 15e:	0e 94 b8 00 	call	0x170	; 0x170 <display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e1       	ldi	r24, 0x1F	; 31
 164:	9e e4       	ldi	r25, 0x4E	; 78
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x14>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x1a>
 16c:	00 00       	nop
 16e:	f3 cf       	rjmp	.-26     	; 0x156 <main+0x4>

00000170 <display>:
	0b00000010  //9
};

void display(uint8_t number1, uint8_t number2) {
	// lower number
	PORTD = numbers[number1] | (1 << 7);
 170:	e8 2f       	mov	r30, r24
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e0 50       	subi	r30, 0x00	; 0
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8f e1       	ldi	r24, 0x1F	; 31
 180:	9e e4       	ldi	r25, 0x4E	; 78
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <display+0x12>
 186:	00 c0       	rjmp	.+0      	; 0x188 <display+0x18>
 188:	00 00       	nop
	_delay_ms(5);
	// higher number
	PORTD = numbers[number2];
 18a:	e6 2f       	mov	r30, r22
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e0 50       	subi	r30, 0x00	; 0
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	80 81       	ld	r24, Z
 194:	8b b9       	out	0x0b, r24	; 11
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
