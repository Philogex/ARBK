
P3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000799  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000286  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000372  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  0000178a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:

volatile uint32_t systemClock = 0;

// compare match interrupt
ISR(TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	systemClock++;
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  c4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <init>:

void init()
{
	// CTC mode, 64 Prescaler
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
  da:	8b e0       	ldi	r24, 0x0B	; 11
  dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = (F_CPU / Prescaler) / 1000;
  e0:	8a ef       	ldi	r24, 0xFA	; 250
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// enable interrupts for compare match
	TIMSK1 = (1 << OCIE1A);
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <waitFor>:
}

void waitFor(uint32_t ms)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
	// error prone due to overflow during targetTime calculation. it still works, but not as expected
	uint32_t targetTime = systemClock + ms;
  fa:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
  fe:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
 102:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
 106:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
 10a:	ab 01       	movw	r20, r22
 10c:	bc 01       	movw	r22, r24
 10e:	40 0f       	add	r20, r16
 110:	51 1f       	adc	r21, r17
 112:	62 1f       	adc	r22, r18
 114:	73 1f       	adc	r23, r19
	while (systemClock < targetTime)
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 122:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 126:	84 17       	cp	r24, r20
 128:	95 07       	cpc	r25, r21
 12a:	a6 07       	cpc	r26, r22
 12c:	b7 07       	cpc	r27, r23
 12e:	98 f3       	brcs	.-26     	; 0x116 <waitFor+0x20>
	;
}
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <waitUntil>:

void waitUntil(uint32_t ms)
{
 136:	ab 01       	movw	r20, r22
 138:	bc 01       	movw	r22, r24
	while (systemClock < ms)
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 142:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 146:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 14a:	84 17       	cp	r24, r20
 14c:	95 07       	cpc	r25, r21
 14e:	a6 07       	cpc	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	98 f3       	brcs	.-26     	; 0x13a <waitUntil+0x4>
	;
}
 154:	08 95       	ret

00000156 <main>:

int main()
{
	init();
 156:	0e 94 6d 00 	call	0xda	; 0xda <init>
	DDRB |= (1 << DDB0);
 15a:	20 9a       	sbi	0x04, 0	; 4
	
	waitUntil(4000);
 15c:	60 ea       	ldi	r22, 0xA0	; 160
 15e:	7f e0       	ldi	r23, 0x0F	; 15
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 9b 00 	call	0x136	; 0x136 <waitUntil>
	while (1)
	{
		PORTB ^= (1 << DDB0);
 168:	c1 e0       	ldi	r28, 0x01	; 1
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	8c 27       	eor	r24, r28
 16e:	85 b9       	out	0x05, r24	; 5
		// one sec delay
		waitFor(1000);
 170:	68 ee       	ldi	r22, 0xE8	; 232
 172:	73 e0       	ldi	r23, 0x03	; 3
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 7b 00 	call	0xf6	; 0xf6 <waitFor>
 17c:	f6 cf       	rjmp	.-20     	; 0x16a <main+0x14>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
